// Generated by BUCKLESCRIPT VERSION 2.2.0, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");

var LeftRight = /* module */[];

function combine(r1, r2) {
  var allEvents = List.append(List.map((function (x) {
              return /* Left */Block.__(0, [x]);
            }), r1[/* events */1]), List.map((function (x) {
              return /* Right */Block.__(1, [x]);
            }), r2[/* events */1]));
  return /* record */[
          /* newState : tuple */[
            r1[/* newState */0],
            r2[/* newState */0]
          ],
          /* events */allEvents
        ];
}

function mapState(f, r) {
  return /* record */[
          /* newState */Curry._1(f, r[/* newState */0]),
          /* events */r[/* events */1]
        ];
}

function mapEvent(f, r) {
  return /* record */[
          /* newState */r[/* newState */0],
          /* events */List.map(f, r[/* events */1])
        ];
}

function mapAction(_, r) {
  return /* record */[
          /* newState */r[/* newState */0],
          /* events */r[/* events */1]
        ];
}

var Result2 = /* module */[
  /* combine */combine,
  /* mapState */mapState,
  /* mapEvent */mapEvent,
  /* mapAction */mapAction
];

function mapInit(f, block) {
  var initialize = function (init) {
    return Curry._1(block[/* initialize */0], Curry._1(f, init));
  };
  return /* record */[
          /* initialize */initialize,
          /* handle */block[/* handle */1],
          /* viewModel */block[/* viewModel */2],
          /* getValue */block[/* getValue */3]
        ];
}

function mapValue(f, block) {
  var getValue = function (s) {
    return Curry._1(f, Curry._1(block[/* getValue */3], s));
  };
  return /* record */[
          /* initialize */block[/* initialize */0],
          /* handle */block[/* handle */1],
          /* viewModel */block[/* viewModel */2],
          /* getValue */getValue
        ];
}

function combine$1(b1, b2) {
  var initialize = function (param) {
    var res1 = Curry._1(b1[/* initialize */0], param[0]);
    var res2 = Curry._1(b2[/* initialize */0], param[1]);
    return combine(res1, res2);
  };
  var handle = function (state, action) {
    if (action.tag) {
      var res = Curry._2(b1[/* handle */1], state[1], action[0]);
      return /* record */[
              /* newState : tuple */[
                state[0],
                res[/* newState */0]
              ],
              /* events */List.map((function (x) {
                      return /* Right */Block.__(1, [x]);
                    }), res[/* events */1])
            ];
    } else {
      var res$1 = Curry._2(b1[/* handle */1], state[0], action[0]);
      return /* record */[
              /* newState : tuple */[
                res$1[/* newState */0],
                state[1]
              ],
              /* events */List.map((function (x) {
                      return /* Left */Block.__(0, [x]);
                    }), res$1[/* events */1])
            ];
    }
  };
  var viewModel = function (param, dispatch) {
    var vm1 = Curry._2(b1[/* viewModel */2], param[0], (function (a) {
            return Curry._1(dispatch, /* Left */Block.__(0, [a]));
          }));
    var vm2 = Curry._2(b2[/* viewModel */2], param[1], (function (a) {
            return Curry._1(dispatch, /* Right */Block.__(1, [a]));
          }));
    return /* tuple */[
            vm1,
            vm2
          ];
  };
  var getValue = function (param) {
    return /* tuple */[
            Curry._1(b1[/* getValue */3], param[0]),
            Curry._1(b2[/* getValue */3], param[1])
          ];
  };
  return /* record */[
          /* initialize */initialize,
          /* handle */handle,
          /* viewModel */viewModel,
          /* getValue */getValue
        ];
}

function either(b1, b2) {
  var initialize = function (init) {
    if (init.tag) {
      return mapEvent((function (x) {
                    return /* Right */Block.__(1, [x]);
                  }), mapState((function (x) {
                        return /* Right */Block.__(1, [x]);
                      }), mapAction((function (x) {
                            return /* Right */Block.__(1, [x]);
                          }), Curry._1(b2[/* initialize */0], init[0]))));
    } else {
      return mapEvent((function (x) {
                    return /* Left */Block.__(0, [x]);
                  }), mapState((function (x) {
                        return /* Left */Block.__(0, [x]);
                      }), mapAction((function (x) {
                            return /* Left */Block.__(0, [x]);
                          }), Curry._1(b1[/* initialize */0], init[0]))));
    }
  };
  var handle = function (state, action) {
    if (action.tag) {
      if (state.tag) {
        return mapEvent((function (x) {
                      return /* Right */Block.__(1, [x]);
                    }), mapState((function (x) {
                          return /* Right */Block.__(1, [x]);
                        }), mapAction((function (x) {
                              return /* Right */Block.__(1, [x]);
                            }), Curry._2(b1[/* handle */1], state[0], action[0]))));
      } else {
        return /* record */[
                /* newState */state,
                /* events : [] */0
              ];
      }
    } else if (state.tag) {
      return /* record */[
              /* newState */state,
              /* events : [] */0
            ];
    } else {
      return mapEvent((function (x) {
                    return /* Left */Block.__(0, [x]);
                  }), mapState((function (x) {
                        return /* Left */Block.__(0, [x]);
                      }), mapAction((function (x) {
                            return /* Left */Block.__(0, [x]);
                          }), Curry._2(b1[/* handle */1], state[0], action[0]))));
    }
  };
  var viewModel = function (state, dispatch) {
    if (state.tag) {
      return Curry._2(b2[/* viewModel */2], state[0], (function (a) {
                    return Curry._1(dispatch, /* Right */Block.__(1, [a]));
                  }));
    } else {
      return Curry._2(b1[/* viewModel */2], state[0], (function (a) {
                    return Curry._1(dispatch, /* Left */Block.__(0, [a]));
                  }));
    }
  };
  var getValue = function (state) {
    if (state.tag) {
      return /* Right */Block.__(1, [Curry._1(b2[/* getValue */3], state[0])]);
    } else {
      return /* Left */Block.__(0, [Curry._1(b1[/* getValue */3], state[0])]);
    }
  };
  return /* record */[
          /* initialize */initialize,
          /* handle */handle,
          /* viewModel */viewModel,
          /* getValue */getValue
        ];
}

var Block2 = /* module */[
  /* mapInit */mapInit,
  /* mapValue */mapValue,
  /* combine */combine$1,
  /* either */either
];

function initialize() {
  return /* record */[
          /* newState : record */[/* isHovered : false */0],
          /* events : [] */0
        ];
}

function handle(state, action) {
  switch (action) {
    case 0 : 
        return /* record */[
                /* newState */state,
                /* events : :: */[
                  /* Clicked */0,
                  /* [] */0
                ]
              ];
    case 1 : 
        return /* record */[
                /* newState : record */[/* isHovered : true */1],
                /* events : [] */0
              ];
    case 2 : 
        return /* record */[
                /* newState : record */[/* isHovered : false */0],
                /* events : [] */0
              ];
    
  }
}

function viewModel(state, dispatch) {
  return {
          isHovered: state[/* isHovered */0],
          onClick: (function () {
              return Curry._1(dispatch, /* OnClick */0);
            }),
          onMouseEnter: (function () {
              return Curry._1(dispatch, /* OnMouseEnter */1);
            }),
          onMouseLeave: (function () {
              return Curry._1(dispatch, /* OnMouseLeave */2);
            })
        };
}

function getValue() {
  return /* () */0;
}

var block = /* record */[
  /* initialize */initialize,
  /* handle */handle,
  /* viewModel */viewModel,
  /* getValue */getValue
];

var Button = /* module */[
  /* initialize */initialize,
  /* handle */handle,
  /* viewModel */viewModel,
  /* getValue */getValue,
  /* block */block
];

function run(block, onModelChanged) {
  var start = function (initialState) {
    var state = [initialState];
    var dispatch = function (action) {
      var result = Curry._2(block[/* handle */1], state[0], action);
      state[0] = result[/* newState */0];
      return Curry._1(onModelChanged, Curry._2(block[/* viewModel */2], state[0], dispatch));
    };
    return dispatch;
  };
  var initialResult = Curry._1(block[/* initialize */0], /* () */0);
  var initialState = initialResult[/* newState */0];
  var dispatch = start(initialResult[/* newState */0]);
  return Curry._2(block[/* viewModel */2], initialState, dispatch);
}

exports.LeftRight = LeftRight;
exports.Result2 = Result2;
exports.Block2 = Block2;
exports.Button = Button;
exports.run = run;
/* No side effect */
