// Generated by BUCKLESCRIPT VERSION 2.2.0, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Result2$UiLibrary = require("./Result2.bs.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function mapInit(f, block) {
  var initialize = function (init) {
    return Curry._1(block[/* initialize */0], Curry._1(f, init));
  };
  return /* record */[
          /* initialize */initialize,
          /* handle */block[/* handle */1],
          /* viewModel */block[/* viewModel */2],
          /* getValue */block[/* getValue */3]
        ];
}

function mapValue(f, block) {
  var getValue = function (s) {
    return Curry._1(f, Curry._1(block[/* getValue */3], s));
  };
  return /* record */[
          /* initialize */block[/* initialize */0],
          /* handle */block[/* handle */1],
          /* viewModel */block[/* viewModel */2],
          /* getValue */getValue
        ];
}

function mapModel(f, block) {
  var viewModel = function (s, dispatch) {
    return Curry._1(f, Curry._2(block[/* viewModel */2], s, dispatch));
  };
  return /* record */[
          /* initialize */block[/* initialize */0],
          /* handle */block[/* handle */1],
          /* viewModel */viewModel,
          /* getValue */block[/* getValue */3]
        ];
}

function combine(b1, b2) {
  var initialize = function (param) {
    var res1 = Curry._1(b1[/* initialize */0], param[0]);
    var res2 = Curry._1(b2[/* initialize */0], param[1]);
    return Result2$UiLibrary.combine(res1, res2);
  };
  var handle = function (param, action) {
    var state2 = param[1];
    var state1 = param[0];
    if (action.tag) {
      var res = Curry._2(b2[/* handle */1], state2, action[0]);
      return /* record */[
              /* newState : tuple */[
                state1,
                res[/* newState */0]
              ],
              /* events */List.map((function (x) {
                      return /* Right */Block.__(1, [x]);
                    }), res[/* events */1])
            ];
    } else {
      var res$1 = Curry._2(b1[/* handle */1], state1, action[0]);
      return /* record */[
              /* newState : tuple */[
                res$1[/* newState */0],
                state2
              ],
              /* events */List.map((function (x) {
                      return /* Left */Block.__(0, [x]);
                    }), res$1[/* events */1])
            ];
    }
  };
  var viewModel = function (param, dispatch) {
    var vm1 = Curry._2(b1[/* viewModel */2], param[0], (function (a) {
            return Curry._1(dispatch, /* Left */Block.__(0, [a]));
          }));
    var vm2 = Curry._2(b2[/* viewModel */2], param[1], (function (a) {
            return Curry._1(dispatch, /* Right */Block.__(1, [a]));
          }));
    return /* tuple */[
            vm1,
            vm2
          ];
  };
  var getValue = function (param) {
    var v1 = Curry._1(b1[/* getValue */3], param[0]);
    var v2 = Curry._1(b2[/* getValue */3], param[1]);
    return /* tuple */[
            v1,
            v2
          ];
  };
  return /* record */[
          /* initialize */initialize,
          /* handle */handle,
          /* viewModel */viewModel,
          /* getValue */getValue
        ];
}

function either(b1, b2) {
  var initialize = function (init) {
    if (init.tag) {
      return Result2$UiLibrary.mapEvent((function (x) {
                    return /* Right */Block.__(1, [x]);
                  }), Result2$UiLibrary.mapState((function (x) {
                        return /* Right */Block.__(1, [x]);
                      }), Result2$UiLibrary.mapAction((function (x) {
                            return /* Right */Block.__(1, [x]);
                          }), Curry._1(b2[/* initialize */0], init[0]))));
    } else {
      return Result2$UiLibrary.mapEvent((function (x) {
                    return /* Left */Block.__(0, [x]);
                  }), Result2$UiLibrary.mapState((function (x) {
                        return /* Left */Block.__(0, [x]);
                      }), Result2$UiLibrary.mapAction((function (x) {
                            return /* Left */Block.__(0, [x]);
                          }), Curry._1(b1[/* initialize */0], init[0]))));
    }
  };
  var handle = function (state, action) {
    if (action.tag) {
      throw [
            Caml_builtin_exceptions.match_failure,
            [
              "Block2.ml",
              72,
              4
            ]
          ];
    } else if (state.tag) {
      return /* record */[
              /* newState */state,
              /* events : [] */0
            ];
    } else {
      return Result2$UiLibrary.mapEvent((function (x) {
                    return /* Left */Block.__(0, [x]);
                  }), Result2$UiLibrary.mapState((function (x) {
                        return /* Left */Block.__(0, [x]);
                      }), Result2$UiLibrary.mapAction((function (x) {
                            return /* Left */Block.__(0, [x]);
                          }), Curry._2(b1[/* handle */1], state[0], action[0]))));
    }
  };
  var viewModel = function (state, dispatch) {
    if (state.tag) {
      return Curry._2(b2[/* viewModel */2], state[0], (function (a) {
                    return Curry._1(dispatch, /* Right */Block.__(1, [a]));
                  }));
    } else {
      return Curry._2(b1[/* viewModel */2], state[0], (function (a) {
                    return Curry._1(dispatch, /* Left */Block.__(0, [a]));
                  }));
    }
  };
  var getValue = function (state) {
    if (state.tag) {
      return /* Right */Block.__(1, [Curry._1(b2[/* getValue */3], state[0])]);
    } else {
      return /* Left */Block.__(0, [Curry._1(b1[/* getValue */3], state[0])]);
    }
  };
  return /* record */[
          /* initialize */initialize,
          /* handle */handle,
          /* viewModel */viewModel,
          /* getValue */getValue
        ];
}

exports.mapInit = mapInit;
exports.mapValue = mapValue;
exports.mapModel = mapModel;
exports.combine = combine;
exports.either = either;
/* No side effect */
